package main.java;import java.util.Arrays;/** *  The <code>RandomNumber</code> class  offers facilities  *  for pseudorandom number generation. *  <p> *  An instance of this class is used to generate a stream of  *  pseudorandom numbers. The class uses a long seed, which is  *  modified using a linear congruential formula. See <ul> *  <li>Donald Knuth, <i>The Art of Computer Programming,  *  Volume 2</i>, Section 3.2.1. for general information about *  random number gerneration and  *  <li>S. Park and K. Miller, Random number generators: Good *  ones are hard to find, <i>Comm. ACM</i> 31 (1988) 1192-1201  *  for the specific one implemented here.   *  </ul> *  @see java.util.Random *  @see java.lang.Math#random() */public class RandomNumberArray {    private static final long MULTIPLIER = 16807;    private static final long MODULUS =  2147483647;    // Quotient of MODULUS / MULTIPLIER    private static final long QUOT = 127773;     // Remainder of MODULUS / MULTIPLIER    private static final long REM  = 2836;       /**     * The current seed of the generator.      */    private long currentSeed;    private Item[] theList;    /**     * Constructs a RandomNumber object and initializes it     * with <code>System.currentTimeMillis()</code>     */    public RandomNumberArray(int num) {        theList = new Item[num];        int[] array2 = new int[num];        int count =0;       int check;               currentSeed = System.currentTimeMillis() % MODULUS;            for(int i=0; i < num; i++) {        	        	                             while(theList[i] == null) {            	 check = nextIntRand(0, num);                 Arrays.sort(array2);             if (Arrays.binarySearch(array2, check) < 0) {                                       theList[i] = new Item(check);                       array2[i] = check;}            }    }}    public Item[] getList() {    	    	return this.theList;    }        /**     * Generates the next random number in the interval [0,1]     * @return The next random number in [0,1].     */    public double nextDoubleRand() {            long temp = MULTIPLIER*(currentSeed%QUOT) -                             REM*(currentSeed/QUOT);            currentSeed = (temp > 0) ? temp : temp + MODULUS;            return (double) currentSeed / (double) MODULUS;    }        /**     * Generates a random int value between the given limits.     * @param lo The lower bound.     * @param hi The upper bound.     * @return An integer value in {lo,...,hi}     * @throws InvalidOperationException if lo > hi          */    public int nextIntRand(int lo, int hi)                             throws InvalidOperationException {            if (lo > hi)                    throw new InvalidOperationException(                            "invalid range: " + lo + " > " + hi);            return (int) (nextDoubleRand() * (hi - lo + 1)  + lo);    }}